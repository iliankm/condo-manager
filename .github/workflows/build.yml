name: Build

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - run: echo ref=${{ github.ref }} event_name=${{ github.event_name }}
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Compile and code linting
      run: ./mvnw -B verify -DskipTests -DskipBuildDocker

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: build
    steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin'
            cache: maven
        - name: Run unit tests
          run: ./mvnw -B verify -DskipITs -Ddetekt.skip
        - name: Add coverage to PR
          if: github.event_name == 'pull_request'
          uses: madrapps/jacoco-report@v1.6.1
          with:
            paths: |
              ${{ github.workspace }}/**/target/site/jacoco/jacoco.xml
            token: ${{ secrets.GITHUB_TOKEN }}
            min-coverage-overall: 80
            min-coverage-changed-files: 80
            title: Code Coverage
            update-comment: true

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build docker image and run integration tests
        run: ./mvnw -B verify -DskipUTs -Ddetekt.skip
      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
        with:
          images: 'condo-manager'
          dest: 'logs/integration-test'
      - name: Upload container logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-tests-container-logs
          path: logs/integration-test/*
  publish-docker-image:
    name: Publish docker image
    needs: [build, unit-tests, integration-tests]
    if: github.event_name == 'pull_request' && github.head_ref == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: release
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build docker image and push it to registry
        run: |
          version=`./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout`
          imageName=ghcr.io/iliankm/condo-manager/condo-manager:$version
          ./mvnw -B package -DskipTests -Dspring-boot.build-image.imageName=$imageName
          docker push $imageName
  merge-release-pr:
    name: Merge release PR and tag main
    needs: [build, unit-tests, integration-tests]
    if: github.event_name == 'pull_request' && github.head_ref == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: release
      - name: Merge release PR
        run: gh pr merge --merge --subject "Merge release branch into main."
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - uses: actions/checkout@v3
        with:
          ref: main
      - name: Setup git user
        uses: fregante/setup-git-user@v2
      - name: Tag main branch and create release
        run: |
          version=`./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout`
          git tag -a v$version -m "Version $version"
          git push origin --tag
          gh release create v$version --generate-notes
        env:
          GITHUB_TOKEN: ${{ github.token }}
